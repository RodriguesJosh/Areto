OOP:
1. Abstraction (player, npc, object, item).
2. Encalpsulation (setters and getters).
3. Inheritance (entity, packethandler, commandhandler).
4. Message passing (packet, packetbuilder).
5. Modular programming (everything).

Performance:
1. Server VM.
2. Methods and fields should become final and/or static.
3. Use large classes, not small ones.
4. Avoid interfaces and abstract classes - avoid OOP.
5. Create large methods instead of smaller one.
6. Avoid synchronization.
7. Avoid creating lots of short-lived Objects.
8. Use smaller primitive data types when possible.
9. Use a boolean if an int value is 0 or 1.

TODO:
1. Create all the spells via scripts, xml as well as java.
2. Add more scripts other than python, ruby and javascript; such as xml, jni, perl, lisp, etc.
3. Add more OOP - forget about performance for now.
4. Finish the quests.
5. Finish the minigames.
6. Finish the skills.
7. Finish the random events.
8. Get the server to actually connect to a client.
9. Create sql files for the items, spells, npcs, etc.
10. Finish the file server.
11. Finish the task system.
12. Create more shops.
13. Finish the dialogues.
14. Finish the grand exchange system.
15. Finsih the clue scrolls.
16. Finish the donation system.
17. Finish the eating system.
18. Finish the bank.
19. Finish the combat system.
20. Finish the demo system.
21. Finish the lobby system.
22. Finish the bot system.
23. Finish the login server.
24. Finish the trade system.
25. Finish the wilderness for pking.
26. Create more packets.
27. Add multiple worlds - up to five or ten.
28. Add multiple languages.
29. Add javadocs.
30. Make Google Translate be used throughout the whole server.
31. Transfer Google Translate over to the client.
32. A performance/OOP distribution for preference of others.
33. Check for a collection filled with enums.
34. Synchronize add/remove methods for collections.
35. Create multiple networking API supportage.
36. Switch networking APIs while playing (ByteBuffer -> ChannelBuffer -> IoBuffer)!
37. Thread priorities for player/NPC updating.
38. Override classes/methods when it comes to networking APIs other than Netty.

Programs:
1. Netty Server will be the main server.
2. Netty Cache Editor will edit the cache.
3. Netty Client will be the connecting client for this server.
4. Netty Interface Editor will edit any interface on the client and/or add new ones.
5. Netty Map Editor will edit any map on the client and/or add new ones.
6. RuneRoid will be a Java interpreter for the RuneRoid scripting language.

Design Patterns (could be wrong on some, if not all): How the software is being designed.

Creational:
1. Abstract Factory: Is a superclass that is the mother to a bunch of related Objects.
2. Builder: Separate the actual building code from the actual Objects you are building.
3. Factory Method: A superclass that will let subclasses allow what class to instantiate.
4. Lazy Initialization: Delaying an important task until the first time it is created.
5. Multiton: Only has one instance per key in a Map.
6. Object Pool (singleton design when using this!): A pool/group filled with Objects to reuse over and over.
If one is not used, clean it up. If they're all in use, create more for more users to use.
7. Prototype: Creates numerous clones and uses them to your advantage. This is to save the use of "new" for
Object creation.
8. Resource Acquisition is Initialization: Call things need be in constructor, let the destructor handle the closing.
9. Singleton: Only has one instance and can be accessed anywhere.

Structural:
1. Adapter: Allows classes to "adapt" or "come together" in a way with each other; simplicity as its peak for this one.
2. Bridge: Decouples (separates) the abstraction from the implementation but also builds a bridge between them somehow.
3. Composite: Represents a group and a single Object at the same time.
4. Decorator: A "wrapper" to decorate a specific Object more so than what it is already.
5. Facade: A client that can only see the face of something and no internal wiring; the client asks a "keeper" for
"hidden" Objects.
6. Front Controller: Handle tasks/events that are common.
7. Flyweight: Store Objects (usually in a Collection) and there will only be instance to it to save memory.
8. Private Class: Encapsilate class declaration and instance variables/attributes.
9. Proxy: Provides a "holder" for another Object of that type to gain access to it.

Behavioral:
1. Chain of Responsibility: Creates a "chain" or a "line" of Objects to pass from one to another.
2. Command: "Hide" information to be used at a later time/date.
3. Interpreter: Evaluates sentences in a language.
4. Iterator: Accesses the elements in an Collection without showing any "hidden" material.
5. Mediator: The main logic for a class for other classes.
6. Memento: Rollback/undo an Object's previous state.
7. Null Object: Avoid using null when possible; create an "empty" primitive data type/Object.
8. Observer: Observers that observe the subject Object and if the Object changes its state, everyone is notified.
9. Servant: Define one thing in a class instead of numerous classes.
10. Specification: A single method that will return a specific value; basically, you will not have to use useless methods.
11. State: Change an Object's state.
12. Strategy: Create multiple classes for each algorithm being used; makes them independant.
13. Template Method: Define/execute the steps of an algorithm and will be used by subclasses.
14. Visitor: Provide methods that take input for Objects they wish to visit.

Concurrency:
1. Active Object: Breaks apart the execution of a method from the invocation of the method; concurreny at its finest.
2. Balking: Execute an Object when it is in a specific state.
3. Binding Properties: Combine multiple Observers to force the synchronization of properties in different Objects.
4. Messaging: Information passed between applications and components.
5. Double-checked Locking: Test the beforehand lock and if successful, lock it permanently.
6. Event-based Asynchronous: State problems within the asynchronous pattern in multithreaded programs.
7. Guarded Suspension: Executes a task but only if the thread is locked and a precondition (before task) to be done.
8. Lock: Prevent a thread from accessing this locked thread.
9. Monitor Object: Prevents Objects from using a thread at the same time; one must be patient.
10. Reactor: Handle requests to a service by one or more inputs and then dispatches them to the appropriate handlers.
11. Read-write Lock: Concurrents the read access to an Object but requires much more access for writing access.
12. Scheduler: Control when threads can execute single-threaded code.
13. Thread Pool: A bundle of Threads that have tasks to execute when need be; pretty much the same as the Object Pool.
14. Thread-specific Storage: Give data of a separate insance in a multi-threaded environment.

Tests:
Add Array: 2.251346ms
Index: 1999 Get Array: 0.040522ms
Remove Array: 0.039463ms

Add ArrayList: 6.790717ms
Get ArrayList: 4.696365ms
Remove ArrayList: 8.748629ms

Add LinkedList: 5.438497ms
Get LinkedList: 20.538673ms
Remove LinkedList: 10.288645ms

Add Vector: 5.112583ms
Get Vector: 1.678483ms
Remove Vector: 2.012536ms

Add ArrayList Iterator: 0.523229ms
Get ArrayList Iterator: 0.004808ms
Remove ArrayList Iterator: 0.002874ms

Add LinkedList Iterator: 0.185499ms
Get LinkedList Iterator: 0.01309ms
Remove LinkedList Iterator: 0.005117ms

Add Vector Iterator: 0.557606ms
Get Vector Iterator: 0.004187ms
Remove Vector Iterator: 0.002981ms

Add For Each ArrayList: 0.004383ms
Get For Each ArrayList: 0.003083ms
Remove For Each ArrayList: 0.002734ms

Add For Each LinkedList: 0.007409ms
Get For Each LinkedList: 0.003843ms
Remove For Each LinkedList: 0.004052ms

Add For Each Vector: 0.004348ms
Get For Each Vector: 0.002873ms
Remove For Each Vector: 0.002378ms

Notes:
Serialization Statement: Stores Objects or data types into a file or buffer or transmitted accross a network.
Serialization Modifier: All other synchronized methods of the same Object will be blocked until the first synchronized
occurs. It also avoids concurrent (multiple tasking) modifications and makes performance slower.
Volatile: Guarantees that any thread will read a value properly.
Transient: They are not synchronzied and will be lost in space basically - used for passwords I guess.

Packets:
Server > Client:
1	 F	 0	Animation reset
4			Still GFX
24	 F	 1	Flash sidebar
27			Enter number on chat interface
34			Item on interface
35	 F	 4	Camera shake
36			Sprite on interface
44			Creates ground item
50	 F	 9	Send add friend
53			Resets player items
61			Send multicombat icon
65			Update npcs
68	 F	 0	Reset button state
70	 F	 6	Interface offset
71	 F	 3	Send sidebar interface
72	 F	 2	Clear inventory
73	 F	 4	Load map region
74			Send music
75			NPC head interface
79	 F	 4	Scroll position
85			Region on map
87			Refresh interface
97	 F	 2	Show interface
99	 F	 1	Minimap State
101			Add object
104			Show options (Attack, Trade, etc)
106			Alching
107	 F	 0	Reset camera
109	 F	 0	Logout
110	 F	 1	Run energy
114	 F	 2	System update
117			Create projectile
122	 F	 4	Interface color
123			Crash cheat client
126	 VS	 N/A	Send text
134			Set skill level
135	 F	 6	Skill level
151			Remove object
156			Remove ground item
164	 F	 2	Chat interface
171			Add special bar
174			Send sound
176	 F	 10	Open welcome screen
185			Player head on interface
187			Send links
196	 VB	 N/A	Send private message
200	 F	 4	Interface animation
206	 F	 3	Chat settings
208	 F	 2	Walkable interface
214	 VS	 N/A	Send add ignore
219	 F	 0	Clear screen
221	 F	 1	Friends list status
230	 F	 8	Interface model rotation
240	 F	 2	Weight
241	 VS	 N/A	Construct map region (8 * 8 tiles)
246	 F	 6	Interface item
248	 F	 4	Inventory overlay (sidebar)
249	 F	 3	Initialize player
253	 VB	 N/A	Send message
254			Object/player hint icon
300			Close windows

Client > Server:
0	 F	 0	Idle
3	 F	 1	Focus change
4	 VB	 N/A	Chat
14	 F	 8	Item on player
16	 F	 1	Alternate item option 2
17	 F	 2	NPC action 2
21	 F	 2	NPC action 3
25	 F	 10	Item on floor
39	 F	 2	Follow
40	 F	 N/A	NPC Dialogue
41	 F	 6	Equip item
43	 F	 6	Bank 10 items
53	 F	 4	Item on item
70	 F	 6	Object action 3
72	 F	 2	Attack (NPC)
73	 F	 2	Trade request
74	 F	 8	Remove ignore
79	 F	 6	Light item
86	 F	 4	Camera movement
87	 F	 6	Drop item
95	 F	 3	Privacy options
98	 VB	 N/A	Walk on command
101	 F	 13	Design screen
103	 VB	 N/A	Player command
117	 F	 6	Bank 5 items
121	 F	 0	Loading finished
122	 F	 6	Item action 1
126	 VB	 N/A	Private message
129	 F	 6	Bank all items
130	 F	 0	Close window
132	 F	 6	Object action 1
133	 F	 8	Add ignore
135	 F	 6	Bank X items part-1
139	 F	 2	Trade answer
145	 F	 6	Unequip item
155	 F	 2	NPC action 1
164	 VB	 N/A	Regular walk
185	 F	 2	Button click
188	 F	 8	Add friend
192	 F	 12	Item on object
202	 F	 0	Idle logout
208	 F	 4	Bank X items part-2
210	 F	 0	Region change
214	 F	 7	Move item
215	 F	 8	Remove friend
218	 F	 8	Report player
236	 F	 6	Pickup ground item
237	 F	 8	Magic on items
241	 F	 4	Mouse click
248	 VB	 N/A	Map walk
249	 F	 4	Magic on player
252	 F	 6	Object action 2
253	 F	 6	Ground Item Action
