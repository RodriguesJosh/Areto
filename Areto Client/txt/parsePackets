	public boolean parsePacket() {
		if (this.socketStream == null) {
			return false;
		}
		try {
			int i = this.socketStream.available();
			if (i == 0) {
				return false;
			}
			if (this.pktType == -1) {
				this.socketStream.flushInputStream(this.inStream.buffer, 1);
				this.pktType = this.inStream.buffer[0] & 0xff;
				if (this.encryption != null) {
					this.pktType = (this.pktType - this.encryption.getNextKey()) & 0xff;
				}
				this.pktSize = SizeConstants.PACKET_SIZES[this.pktType];
				i--;
			}
			if (this.pktSize == -1) {
				if (i > 0) {
					this.socketStream.flushInputStream(this.inStream.buffer, 1);
					this.pktSize = this.inStream.buffer[0] & 0xff;
					i--;
				} else {
					return false;
				}
			}
			if (this.pktSize == -2) {
				if (i > 1) {
					this.socketStream.flushInputStream(this.inStream.buffer, 2);
					this.inStream.setPosition(0);
					this.pktSize = this.inStream.getUnsignedShort();
					i -= 2;
				} else {
					return false;
				}
			}
			if (i < this.pktSize) {
				return false;
			}
			this.inStream.setPosition(0);
			this.socketStream.flushInputStream(this.inStream.buffer, this.pktSize);
			this.anInt1009 = 0;
			this.anInt843 = this.anInt842;
			this.anInt842 = this.anInt841;
			this.anInt841 = this.pktType;
			if (PacketManager.execute(this.pktType, this, this.inStream)) {
				return true;
			}
			// DONE!
			if (this.pktType == 81) {
				this.updatePlayers(this.pktSize, this.inStream);
				this.aBoolean1080 = false;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 176) {
				this.daysSinceRecovChange = this.inStream.method427();
				this.unreadMessages = this.inStream.method435();
				this.membersInt = this.inStream.getUnsignedByte();
				this.anInt1193 = this.inStream.method440();
				this.daysSinceLastLogin = this.inStream.getUnsignedShort();
				if ((this.anInt1193 != 0) && (this.openInterfaceID == -1)) {
					SignLink.dnslookup(TextClass.method586(this.anInt1193));
					this.clearTopInterfaces();
					char c = '\u028A';
					if ((this.daysSinceRecovChange != 201) || (this.membersInt == 1)) {
						c = '\u028F';
					}
					this.reportAbuseInput = "";
					this.canMute = false;
					for (int k9 = 0; k9 < RSInterface.interfaceCache.length; k9++) {
						if ((RSInterface.interfaceCache[k9] == null) || (RSInterface.interfaceCache[k9].anInt214 != c)) {
							continue;
						}
						this.openInterfaceID = RSInterface.interfaceCache[k9].parentID;
						break;
					}
				}
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 64) {
				this.anInt1268 = this.inStream.method427();
				this.anInt1269 = this.inStream.method428();
				for (int j = this.anInt1268; j < (this.anInt1268 + 8); j++) {
					for (int l9 = this.anInt1269; l9 < (this.anInt1269 + 8); l9++) {
						if (this.groundArray[this.plane][j][l9] != null) {
							this.groundArray[this.plane][j][l9] = null;
							this.spawnGroundItem(j, l9);
						}
					}
				}
				for (Class30_Sub1 class30_sub1 = (Class30_Sub1)this.aClass19_1179.reverseGetFirst(); class30_sub1 != null; class30_sub1 = (Class30_Sub1)this.aClass19_1179.reverseGetNext()) {
					if ((class30_sub1.anInt1297 >= this.anInt1268) && (class30_sub1.anInt1297 < (this.anInt1268 + 8)) && (class30_sub1.anInt1298 >= this.anInt1269) && (class30_sub1.anInt1298 < (this.anInt1269 + 8)) && (class30_sub1.anInt1295 == this.plane)) {
						class30_sub1.anInt1294 = 0;
					}
				}
				this.pktType = -1;
				return true;
			}
			// NOT DONE
			if (this.pktType == 185) {
				int k = this.inStream.method436();
				RSInterface.interfaceCache[k].anInt233 = 3;
				if (Client.myPlayer.desc == null) {
					RSInterface.interfaceCache[k].mediaID = (Client.myPlayer.anIntArray1700[0] << 25) + (Client.myPlayer.anIntArray1700[4] << 20) + (Client.myPlayer.equipment[0] << 15) + (Client.myPlayer.equipment[8] << 10) + (Client.myPlayer.equipment[11] << 5) + Client.myPlayer.equipment[1];
				} else {
					RSInterface.interfaceCache[k].mediaID = (int)(0x12345678L + Client.myPlayer.desc.type);
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 107) {
				this.aBoolean1160 = false;
				for (int l = 0; l < 5; l++) {
					this.aBooleanArray876[l] = false;
				}
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 72) {
				int i1 = this.inStream.method434();
				RSInterface class9 = RSInterface.interfaceCache[i1];
				for (int k15 = 0; k15 < class9.inv.length; k15++) {
					class9.inv[k15] = -1;
					class9.inv[k15] = 0;
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 214) {
				this.ignoreCount = this.pktSize / 8;
				for (int j1 = 0; j1 < this.ignoreCount; j1++) {
					this.ignoreListAsLongs[j1] = this.inStream.getLong();
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 166) {
				this.aBoolean1160 = true;
				this.anInt1098 = this.inStream.getUnsignedByte();
				this.anInt1099 = this.inStream.getUnsignedByte();
				this.anInt1100 = this.inStream.getUnsignedShort();
				this.anInt1101 = this.inStream.getUnsignedByte();
				this.anInt1102 = this.inStream.getUnsignedByte();
				if (this.anInt1102 >= 100) {
					this.xCameraPos = (this.anInt1098 * 128) + 64;
					this.yCameraPos = (this.anInt1099 * 128) + 64;
					this.zCameraPos = this.getFloorDrawHeight(this.plane, this.yCameraPos, this.xCameraPos) - this.anInt1100;
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 134) {
				this.needDrawTabArea = true;
				int k1 = this.inStream.getUnsignedByte();
				int i10 = this.inStream.method439();
				int l15 = this.inStream.getUnsignedByte();
				this.currentExp[k1] = i10;
				this.currentStats[k1] = l15;
				this.maxStats[k1] = 1;
				for (int k20 = 0; k20 < 98; k20++) {
					if (i10 >= Client.anIntArray1019[k20]) {
						this.maxStats[k1] = k20 + 2;
					}
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 71) {
				int l1 = this.inStream.getUnsignedShort();
				int j10 = this.inStream.method426();
				if (l1 == 65535) {
					l1 = -1;
				}
				this.tabInterfaceIDs[j10] = l1;
				this.needDrawTabArea = true;
				this.tabAreaAltered = true;
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 74) {
				int i2 = this.inStream.method434();
				if (i2 == 65535) {
					i2 = -1;
				}
				if ((i2 != this.currentSong) && this.musicEnabled && !Client.lowMem && (this.prevSong == 0)) {
					this.nextSong = i2;
					this.songChanging = true;
					this.onDemandFetcher.method558(2, this.nextSong);
				}
				this.currentSong = i2;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 121) {
				int j2 = this.inStream.method436();
				int k10 = this.inStream.method435();
				if (this.musicEnabled && !Client.lowMem) {
					this.nextSong = j2;
					this.songChanging = false;
					this.onDemandFetcher.method558(2, this.nextSong);
					this.prevSong = k10;
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 109) {
				this.resetLogout();
				this.pktType = -1;
				return false;
			}
			// DONE!
			if (this.pktType == 70) {
				int k2 = this.inStream.getShort();
				int l10 = this.inStream.method437();
				int i16 = this.inStream.method434();
				RSInterface class9_5 = RSInterface.interfaceCache[i16];
				class9_5.anInt263 = k2;
				class9_5.anInt265 = l10;
				this.pktType = -1;
				return true;
			}
			// DONE - SOMEWHAT!
			if ((this.pktType == 73) || (this.pktType == 241)) {
				int l2 = this.anInt1069;
				int i11 = this.anInt1070;
				if (this.pktType == 73) {
					l2 = this.inStream.method435();
					i11 = this.inStream.getUnsignedShort();
					this.aBoolean1159 = false;
				}
				if (this.pktType == 241) {
					i11 = this.inStream.method435();
					this.inStream.startBitAccess();
					for (int j16 = 0; j16 < 4; j16++) {
						for (int l20 = 0; l20 < 13; l20++) {
							for (int j23 = 0; j23 < 13; j23++) {
								int i26 = this.inStream.putBits(1);
								if (i26 == 1) {
									this.anIntArrayArrayArray1129[j16][l20][j23] = this.inStream.putBits(26);
								} else {
									this.anIntArrayArrayArray1129[j16][l20][j23] = -1;
								}
							}
						}
					}
					this.inStream.finishBitAccess();
					l2 = this.inStream.getUnsignedShort();
					this.aBoolean1159 = true;
				}
				if ((this.anInt1069 == l2) && (this.anInt1070 == i11) && (this.loadingStage == 2)) {
					this.pktType = -1;
					return true;
				}
				this.anInt1069 = l2;
				this.anInt1070 = i11;
				this.baseX = (this.anInt1069 - 6) * 8;
				this.baseY = (this.anInt1070 - 6) * 8;
				this.aBoolean1141 = (((this.anInt1069 / 8) == 48) || ((this.anInt1069 / 8) == 49)) && ((this.anInt1070 / 8) == 48);
				if (((this.anInt1069 / 8) == 48) && ((this.anInt1070 / 8) == 148)) {
					this.aBoolean1141 = true;
				}
				this.loadingStage = 1;
				this.aLong824 = System.currentTimeMillis();
				this.aRSImageProducer_1165.initDrawingArea();
				this.aTextDrawingArea_1271.drawText(0, "Loading - please wait.", 151, 257);
				this.aTextDrawingArea_1271.drawText(0xffffff, "Loading - please wait.", 150, 256);
				this.aRSImageProducer_1165.drawGraphics(4, super.graphics, 4);
				if (this.pktType == 73) {
					int k16 = 0;
					for (int i21 = (this.anInt1069 - 6) / 8; i21 <= ((this.anInt1069 + 6) / 8); i21++) {
						for (int k23 = (this.anInt1070 - 6) / 8; k23 <= ((this.anInt1070 + 6) / 8); k23++) {
							k16++;
						}
					}
					this.aByteArrayArray1183 = new byte[k16][];
					this.aByteArrayArray1247 = new byte[k16][];
					this.anIntArray1234 = new int[k16];
					this.anIntArray1235 = new int[k16];
					this.anIntArray1236 = new int[k16];
					k16 = 0;
					for (int l23 = (this.anInt1069 - 6) / 8; l23 <= ((this.anInt1069 + 6) / 8); l23++) {
						for (int j26 = (this.anInt1070 - 6) / 8; j26 <= ((this.anInt1070 + 6) / 8); j26++) {
							this.anIntArray1234[k16] = (l23 << 8) + j26;
							if (this.aBoolean1141 && ((j26 == 49) || (j26 == 149) || (j26 == 147) || (l23 == 50) || ((l23 == 49) && (j26 == 47)))) {
								this.anIntArray1235[k16] = -1;
								this.anIntArray1236[k16] = -1;
								k16++;
							} else {
								int k28 = this.anIntArray1235[k16] = this.onDemandFetcher.method562(0, j26, l23);
								if (k28 != -1) {
									this.onDemandFetcher.method558(3, k28);
								}
								int j30 = this.anIntArray1236[k16] = this.onDemandFetcher.method562(1, j26, l23);
								if (j30 != -1) {
									this.onDemandFetcher.method558(3, j30);
								}
								k16++;
							}
						}
					}
				}
				if (this.pktType == 241) {
					int l16 = 0;
					int ai[] = new int[676];
					for (int i24 = 0; i24 < 4; i24++) {
						for (int k26 = 0; k26 < 13; k26++) {
							for (int l28 = 0; l28 < 13; l28++) {
								int k30 = this.anIntArrayArrayArray1129[i24][k26][l28];
								if (k30 != -1) {
									int k31 = (k30 >> 14) & 0x3ff;
									int i32 = (k30 >> 3) & 0x7ff;
									int k32 = ((k31 / 8) << 8) + (i32 / 8);
									for (int j33 = 0; j33 < l16; j33++) {
										if (ai[j33] != k32) {
											continue;
										}
										k32 = -1;
										break;
									}
									if (k32 != -1) {
										ai[l16++] = k32;
									}
								}
							}
						}
					}
					this.aByteArrayArray1183 = new byte[l16][];
					this.aByteArrayArray1247 = new byte[l16][];
					this.anIntArray1234 = new int[l16];
					this.anIntArray1235 = new int[l16];
					this.anIntArray1236 = new int[l16];
					for (int l26 = 0; l26 < l16; l26++) {
						int i29 = this.anIntArray1234[l26] = ai[l26];
						int l30 = (i29 >> 8) & 0xff;
						int l31 = i29 & 0xff;
						int j32 = this.anIntArray1235[l26] = this.onDemandFetcher.method562(0, l31, l30);
						if (j32 != -1) {
							this.onDemandFetcher.method558(3, j32);
						}
						int i33 = this.anIntArray1236[l26] = this.onDemandFetcher.method562(1, l31, l30);
						if (i33 != -1) {
							this.onDemandFetcher.method558(3, i33);
						}
					}
				}
				int i17 = this.baseX - this.anInt1036;
				int j21 = this.baseY - this.anInt1037;
				this.anInt1036 = this.baseX;
				this.anInt1037 = this.baseY;
				for (int j24 = 0; j24 < 16384; j24++) {
					NPC npc = this.npcArray[j24];
					if (npc != null) {
						for (int j29 = 0; j29 < 10; j29++) {
							npc.smallX[j29] -= i17;
							npc.smallY[j29] -= j21;
						}
						npc.x -= i17 * 128;
						npc.y -= j21 * 128;
					}
				}
				for (int i27 = 0; i27 < Constants.MAX_PLAYERS; i27++) {
					Player player = this.playerArray[i27];
					if (player != null) {
						for (int i31 = 0; i31 < 10; i31++) {
							player.smallX[i31] -= i17;
							player.smallY[i31] -= j21;
						}
						player.x -= i17 * 128;
						player.y -= j21 * 128;
					}
				}
				this.aBoolean1080 = true;
				byte byte1 = 0;
				byte byte2 = 104;
				byte byte3 = 1;
				if (i17 < 0) {
					byte1 = 103;
					byte2 = -1;
					byte3 = -1;
				}
				byte byte4 = 0;
				byte byte5 = 104;
				byte byte6 = 1;
				if (j21 < 0) {
					byte4 = 103;
					byte5 = -1;
					byte6 = -1;
				}
				for (int k33 = byte1; k33 != byte2; k33 += byte3) {
					for (int l33 = byte4; l33 != byte5; l33 += byte6) {
						int i34 = k33 + i17;
						int j34 = l33 + j21;
						for (int k34 = 0; k34 < 4; k34++) {
							if ((i34 >= 0) && (j34 >= 0) && (i34 < 104) && (j34 < 104)) {
								this.groundArray[k34][k33][l33] = this.groundArray[k34][i34][j34];
							} else {
								this.groundArray[k34][k33][l33] = null;
							}
						}
					}
				}
				for (Class30_Sub1 class30_sub1_1 = (Class30_Sub1)this.aClass19_1179.reverseGetFirst(); class30_sub1_1 != null; class30_sub1_1 = (Class30_Sub1)this.aClass19_1179.reverseGetNext()) {
					class30_sub1_1.anInt1297 -= i17;
					class30_sub1_1.anInt1298 -= j21;
					if ((class30_sub1_1.anInt1297 < 0) || (class30_sub1_1.anInt1298 < 0) || (class30_sub1_1.anInt1297 >= 104) || (class30_sub1_1.anInt1298 >= 104)) {
						class30_sub1_1.unlink();
					}
				}
				if (this.destX != 0) {
					this.destX -= i17;
					this.destY -= j21;
				}
				this.aBoolean1160 = false;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 208) {
				int i3 = this.inStream.method437();
				if (i3 >= 0) {
					this.writeInterfaces(i3);
				}
				this.anInt1018 = i3;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 99) {
				this.anInt1021 = this.inStream.getUnsignedByte();
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 75) {
				int j3 = this.inStream.method436();
				int j11 = this.inStream.method436();
				RSInterface.interfaceCache[j11].anInt233 = 2;
				RSInterface.interfaceCache[j11].mediaID = j3;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 114) {
				this.anInt1104 = this.inStream.method434() * 30;
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 60) {
				this.anInt1269 = this.inStream.getUnsignedByte();
				this.anInt1268 = this.inStream.method427();
				while (this.inStream.getPosition() < this.pktSize) {
					int k3 = this.inStream.getUnsignedByte();
					this.manageModelCreations(this.inStream, k3);
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 35) {
				int l3 = this.inStream.getUnsignedByte();
				int k11 = this.inStream.getUnsignedByte();
				int j17 = this.inStream.getUnsignedByte();
				int k21 = this.inStream.getUnsignedByte();
				this.aBooleanArray876[l3] = true;
				this.anIntArray873[l3] = k11;
				this.anIntArray1203[l3] = j17;
				this.anIntArray928[l3] = k21;
				this.anIntArray1030[l3] = 0;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 174) {
				int i4 = this.inStream.getUnsignedShort();
				int l11 = this.inStream.getUnsignedByte();
				int k17 = this.inStream.getUnsignedShort();
				if(this.aBoolean848 && !Client.lowMem && (this.anInt1062 < 50))
				{
					this.anIntArray1207[this.anInt1062] = i4;
					this.anIntArray1241[this.anInt1062] = l11;
					this.anIntArray1250[this.anInt1062] = k17 + Sounds.anIntArray326[i4];
					this.anInt1062++;
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 104) {
				int j4 = this.inStream.method427();
				int i12 = this.inStream.method426();
				String s6 = this.inStream.getString();
				if ((j4 >= 1) && (j4 <= 5)) {
					if (s6.equalsIgnoreCase("null")) {
						s6 = null;
					}
					this.atPlayerActions[j4 - 1] = s6;
					this.atPlayerArray[j4 - 1] = i12 == 0;
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 78) {
				this.destX = 0;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 253) {
				String s = this.inStream.getString();
				if (s.endsWith(":tradereq:")) {
					String s3 = s.substring(0, s.indexOf(":"));
					long l17 = TextClass.longForName(s3);
					boolean flag2 = false;
					for (int j27 = 0; j27 < this.ignoreCount; j27++) {
						if (this.ignoreListAsLongs[j27] != l17) {
							continue;
						}
						flag2 = true;
						break;
					}
					if (!flag2 && (this.anInt1251 == 0)) {
						this.pushMessage("wishes to trade with you.", 4, s3);
					}
				} else if(s.endsWith(":duelreq:")) {
						String s4 = s.substring(0, s.indexOf(":"));
						long l18 = TextClass.longForName(s4);
						boolean flag3 = false;
						for (int k27 = 0; k27 < this.ignoreCount; k27++) {
							if (this.ignoreListAsLongs[k27] != l18) {
								continue;
							}
							flag3 = true;
							break;
						}
						if (!flag3 && (this.anInt1251 == 0)) {
							this.pushMessage("wishes to duel with you.", 8, s4);
						}
					} else if (s.endsWith(":chalreq:")) {
							String s5 = s.substring(0, s.indexOf(":"));
							long l19 = TextClass.longForName(s5);
							boolean flag4 = false;
							for (int l27 = 0; l27 < this.ignoreCount; l27++) {
								if (this.ignoreListAsLongs[l27] != l19) {
									continue;
								}
								flag4 = true;
								break;
							}
							if (!flag4 && (this.anInt1251 == 0)) {
								String s8 = s.substring(s.indexOf(":") + 1, s.length() - 9);
								this.pushMessage(s8, 8, s5);
							}
						} else {
							this.pushMessage(s, 0, "");
						}
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 1) {
				for (int k4 = 0; k4 < this.playerArray.length; k4++) {
					if (this.playerArray[k4] != null) {
						this.playerArray[k4].anim = -1;
					}
				}
				for (int j12 = 0; j12 < this.npcArray.length; j12++) {
					if (this.npcArray[j12] != null) {
						this.npcArray[j12].anim = -1;
					}
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 50) {
				long l4 = this.inStream.getLong();
				int i18 = this.inStream.getUnsignedByte();
				String s7 = TextClass.fixName(TextClass.nameForLong(l4));
				for (int k24 = 0; k24 < this.friendsCount; k24++) {
					if (l4 != this.friendsListAsLongs[k24]) {
						continue;
					}
					if (this.friendsNodeIDs[k24] != i18) {
						this.friendsNodeIDs[k24] = i18;
						this.needDrawTabArea = true;
						if (i18 > 0) {
							this.pushMessage(s7 + " has logged in.", 5, "");
						}
						if (i18 == 0) {
							this.pushMessage(s7 + " has logged out.", 5, "");
						}
					}
					s7 = null;
					break;
				}
				if ((s7 != null) && (this.friendsCount < 200)) {
					this.friendsListAsLongs[this.friendsCount] = l4;
					this.friendsList[this.friendsCount] = s7;
					this.friendsNodeIDs[this.friendsCount] = i18;
					this.friendsCount++;
					this.needDrawTabArea = true;
				}
				for (boolean flag6 = false; !flag6;) {
					flag6 = true;
					for (int k29 = 0; k29 < (this.friendsCount - 1); k29++) {
						if (((this.friendsNodeIDs[k29] != Client.nodeID) && (this.friendsNodeIDs[k29 + 1] == Client.nodeID)) || ((this.friendsNodeIDs[k29] == 0) && (this.friendsNodeIDs[k29 + 1] != 0))) {
							int j31 = this.friendsNodeIDs[k29];
							this.friendsNodeIDs[k29] = this.friendsNodeIDs[k29 + 1];
							this.friendsNodeIDs[k29 + 1] = j31;
							String s10 = this.friendsList[k29];
							this.friendsList[k29] = this.friendsList[k29 + 1];
							this.friendsList[k29 + 1] = s10;
							long l32 = this.friendsListAsLongs[k29];
							this.friendsListAsLongs[k29] = this.friendsListAsLongs[k29 + 1];
							this.friendsListAsLongs[k29 + 1] = l32;
							this.needDrawTabArea = true;
							flag6 = false;
						}
					}
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 110) {
				if (this.tabID == 12) {
					this.needDrawTabArea = true;
				}
				this.energy = this.inStream.getUnsignedByte();
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 254) {
				this.anInt855 = this.inStream.getUnsignedByte();
				if (this.anInt855 == 1) {
					this.anInt1222 = this.inStream.getUnsignedShort();
				}
				if ((this.anInt855 >= 2) && (this.anInt855 <= 6)) {
					if (this.anInt855 == 2) {
						this.anInt937 = 64;
						this.anInt938 = 64;
					}
					if (this.anInt855 == 3) {
						this.anInt937 = 0;
						this.anInt938 = 64;
					}
					if (this.anInt855 == 4) {
						this.anInt937 = 128;
						this.anInt938 = 64;
					}
					if (this.anInt855 == 5) {
						this.anInt937 = 64;
						this.anInt938 = 0;
					}
					if (this.anInt855 == 6) {
						this.anInt937 = 64;
						this.anInt938 = 128;
					}
					this.anInt855 = 2;
					this.anInt934 = this.inStream.getUnsignedShort();
					this.anInt935 = this.inStream.getUnsignedShort();
					this.anInt936 = this.inStream.getUnsignedByte();
				}
				if (this.anInt855 == 10) {
					this.anInt933 = this.inStream.getUnsignedShort();
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 248) {
				int i5 = this.inStream.method435();
				int k12 = this.inStream.getUnsignedShort();
				if (this.backDialogID != -1) {
					this.backDialogID = -1;
					this.inputTaken = true;
				}
				if (this.inputDialogState != 0) {
					this.inputDialogState = 0;
					this.inputTaken = true;
				}
				this.openInterfaceID = i5;
				this.invOverlayInterfaceID = k12;
				this.needDrawTabArea = true;
				this.tabAreaAltered = true;
				this.aBoolean1149 = false;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 79) {
				int j5 = this.inStream.method434();
				int l12 = this.inStream.method435();
				RSInterface class9_3 = RSInterface.interfaceCache[j5];
				if ((class9_3 != null) && (class9_3.type == 0)) {
					if (l12 < 0) {
						l12 = 0;
					}
					if (l12 > (class9_3.scrollMax - class9_3.height)) {
						l12 = class9_3.scrollMax - class9_3.height;
					}
					class9_3.scrollPosition = l12;
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 68) {
				for (int k5 = 0; k5 < this.variousSettings.length; k5++) {
					if (this.variousSettings[k5] != this.anIntArray1045[k5]) {
						this.variousSettings[k5] = this.anIntArray1045[k5];
						this.method33(k5);
						this.needDrawTabArea = true;
					}
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 196) {
				long l5 = this.inStream.getLong();
				int j18 = this.inStream.getInt();
				int l21 = this.inStream.getUnsignedByte();
				boolean flag5 = false;
				for (int i28 = 0; i28 < 100; i28++) {
					if (this.anIntArray1240[i28] != j18) {
						continue;
					}
					flag5 = true;
					break;
				}
				if (l21 <= 1) {
					for (int l29 = 0; l29 < this.ignoreCount; l29++) {
						if (this.ignoreListAsLongs[l29] != l5) {
							continue;
						}
						flag5 = true;
						break;
					}
				}
				if (!flag5 && (this.anInt1251 == 0)) {
					try {
						this.anIntArray1240[this.anInt1169] = j18;
						this.anInt1169 = (this.anInt1169 + 1) % 100;
						String s9 = TextInput.method525(this.pktSize - 13, this.inStream);
						if (l21 != 3) {
							s9 = Censor.doCensor(s9);
						}
						if ((l21 == 2) || (l21 == 3)) {
							this.pushMessage(s9, 7, "@cr2@" + TextClass.fixName(TextClass.nameForLong(l5)));
						} else if (l21 == 1) {
								this.pushMessage(s9, 7, "@cr1@" + TextClass.fixName(TextClass.nameForLong(l5)));
							} else {
								this.pushMessage(s9, 3, TextClass.fixName(TextClass.nameForLong(l5)));
							}
					} catch (Exception e) {
						SignLink.reporterror("Chat error");
					}
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 85) {
				this.anInt1269 = this.inStream.method427();
				this.anInt1268 = this.inStream.method427();
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 24) {
				this.anInt1054 = this.inStream.method428();
				if (this.anInt1054 == this.tabID) {
					if (this.anInt1054 == 3) {
						this.tabID = 1;
					} else {
						this.tabID = 3;
					}
					this.needDrawTabArea = true;
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 246) {
				int i6 = this.inStream.method434();
				int i13 = this.inStream.getUnsignedShort();
				int k18 = this.inStream.getUnsignedShort();
				if (k18 == 65535) {
					RSInterface.interfaceCache[i6].anInt233 = 0;
					this.pktType = -1;
					return true;
				} else {
					ItemDef itemDef = ItemDef.forID(k18);
					RSInterface.interfaceCache[i6].anInt233 = 4;
					RSInterface.interfaceCache[i6].mediaID = k18;
					RSInterface.interfaceCache[i6].anInt270 = itemDef.modelRotation1;
					RSInterface.interfaceCache[i6].anInt271 = itemDef.modelRotation2;
					RSInterface.interfaceCache[i6].anInt269 = (itemDef.modelZoom * 100) / i13;
					this.pktType = -1;
					return true;
				}
			}
			// DONE!
			if (this.pktType == 171) {
				boolean flag1 = this.inStream.getUnsignedByte() == 1;
				int j13 = this.inStream.getUnsignedShort();
				RSInterface.interfaceCache[j13].aBoolean266 = flag1;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 142) {
				int j6 = this.inStream.method434();
				this.method60(j6);
				if (this.backDialogID != -1) {
					this.backDialogID = -1;
					this.inputTaken = true;
				}
				if (this.inputDialogState != 0) {
					this.inputDialogState = 0;
					this.inputTaken = true;
				}
				this.invOverlayInterfaceID = j6;
				this.needDrawTabArea = true;
				this.tabAreaAltered = true;
				this.openInterfaceID = -1;
				this.aBoolean1149 = false;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 126) {
				String s1 = this.inStream.getString();
				int k13 = this.inStream.method435();
				RSInterface.interfaceCache[k13].message = s1;
				if (RSInterface.interfaceCache[k13].parentID == this.tabInterfaceIDs[this.tabID]) {
					this.needDrawTabArea = true;
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 206) {
				this.publicChatMode = this.inStream.getUnsignedByte();
				this.privateChatMode = this.inStream.getUnsignedByte();
				this.tradeMode = this.inStream.getUnsignedByte();
				this.aBoolean1233 = true;
				this.inputTaken = true;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 240) {
				if (this.tabID == 12) {
					this.needDrawTabArea = true;
				}
				this.weight = this.inStream.getShort();
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 8) {
				int k6 = this.inStream.method436();
				int l13 = this.inStream.getUnsignedShort();
				RSInterface.interfaceCache[k6].anInt233 = 1;
				RSInterface.interfaceCache[k6].mediaID = l13;
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 122) {
				int l6 = this.inStream.method436();
				int i14 = this.inStream.method436();
				int i19 = (i14 >> 10) & 0x1f;
				int i22 = (i14 >> 5) & 0x1f;
				int l24 = i14 & 0x1f;
				RSInterface.interfaceCache[l6].textColor = (i19 << 19) + (i22 << 11) + (l24 << 3);
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 53) {
				this.needDrawTabArea = true;
				int i7 = this.inStream.getUnsignedShort();
				RSInterface class9_1 = RSInterface.interfaceCache[i7];
				int j19 = this.inStream.getUnsignedShort();
				for (int j22 = 0; j22 < j19; j22++) {
					int i25 = this.inStream.getUnsignedByte();
					if (i25 == 255) {
						i25 = this.inStream.method440();
					}
					class9_1.inv[j22] = this.inStream.method436();
					class9_1.invStackSizes[j22] = i25;
				}
				for (int j25 = j19; j25 < class9_1.inv.length; j25++) {
					class9_1.inv[j25] = 0;
					class9_1.invStackSizes[j25] = 0;
				}
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 230) {
				int j7 = this.inStream.method435();
				int j14 = this.inStream.getUnsignedShort();
				int k19 = this.inStream.getUnsignedShort();
				int k22 = this.inStream.method436();
				RSInterface.interfaceCache[j14].anInt270 = k19;
				RSInterface.interfaceCache[j14].anInt271 = k22;
				RSInterface.interfaceCache[j14].anInt269 = j7;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 221) {
				this.anInt900 = this.inStream.getUnsignedByte();
				this.needDrawTabArea = true;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 177) {
				this.aBoolean1160 = true;
				this.anInt995 = this.inStream.getUnsignedByte();
				this.anInt996 = this.inStream.getUnsignedByte();
				this.anInt997 = this.inStream.getUnsignedShort();
				this.anInt998 = this.inStream.getUnsignedByte();
				this.anInt999 = this.inStream.getUnsignedByte();
				if (this.anInt999 >= 100) {
					int k7 = (this.anInt995 * 128) + 64;
					int k14 = (this.anInt996 * 128) + 64;
					int i20 = this.getFloorDrawHeight(this.plane, k14, k7) - this.anInt997;
					int l22 = k7 - this.xCameraPos;
					int k25 = i20 - this.zCameraPos;
					int j28 = k14 - this.yCameraPos;
					int i30 = (int)Math.sqrt((l22 * l22) + (j28 * j28));
					this.yCameraCurve = (int)(Math.atan2(k25, i30) * 325.94900000000001D) & 0x7ff;
					this.xCameraCurve = (int)(Math.atan2(l22, j28) * -325.94900000000001D) & 0x7ff;
					if (this.yCameraCurve < 128) {
						this.yCameraCurve = 128;
					}
					if (this.yCameraCurve > 383) {
						this.yCameraCurve = 383;
					}
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 249) {
				this.anInt1046 = this.inStream.method426();
				this.unknownInt10 = this.inStream.method436();
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 65) {
				this.updateGeneralNPCs(this.inStream, this.pktSize);
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 27) {
				this.messagePromptRaised = false;
				this.inputDialogState = 1;
				this.amountOrNameInput = "";
				this.inputTaken = true;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 187) {
				this.messagePromptRaised = false;
				this.inputDialogState = 2;
				this.amountOrNameInput = "";
				this.inputTaken = true;
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 97) {
				int l7 = this.inStream.getUnsignedShort();
				this.method60(l7);
				if (this.invOverlayInterfaceID != -1) {
					this.invOverlayInterfaceID = -1;
					this.needDrawTabArea = true;
					this.tabAreaAltered = true;
				}
				if (this.backDialogID != -1) {
					this.backDialogID = -1;
					this.inputTaken = true;
				}
				if (this.inputDialogState != 0) {
					this.inputDialogState = 0;
					this.inputTaken = true;
				}
				this.openInterfaceID = l7;
				this.aBoolean1149 = false;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 218) {
				int i8 = this.inStream.method438();
				this.dialogID = i8;
				this.inputTaken = true;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if(this.pktType == 87) {
				int j8 = this.inStream.method434();
				int l14 = this.inStream.method439();
				this.anIntArray1045[j8] = l14;
				if (this.variousSettings[j8] != l14) {
					this.variousSettings[j8] = l14;
					this.method33(j8);
					this.needDrawTabArea = true;
					if (this.dialogID != -1) {
						this.inputTaken = true;
					}
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 36) {
				int k8 = this.inStream.method434();
				byte byte0 = this.inStream.getByte();
				this.anIntArray1045[k8] = byte0;
				if (this.variousSettings[k8] != byte0) {
					this.variousSettings[k8] = byte0;
					this.method33(k8);
					this.needDrawTabArea = true;
					if(this.dialogID != -1) {
						this.inputTaken = true;
					}
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 61) {
				this.anInt1055 = this.inStream.getUnsignedByte();
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			if (this.pktType == 200) {
				int l8 = this.inStream.getUnsignedShort();
				int i15 = this.inStream.getShort();
				RSInterface class9_4 = RSInterface.interfaceCache[l8];
				class9_4.anInt257 = i15;
				if (i15 == -1) {
					class9_4.anInt246 = 0;
					class9_4.anInt208 = 0;
				}
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 219) {
				if (this.invOverlayInterfaceID != -1) {
					this.invOverlayInterfaceID = -1;
					this.needDrawTabArea = true;
					this.tabAreaAltered = true;
				}
				if (this.backDialogID != -1) {
					this.backDialogID = -1;
					this.inputTaken = true;
				}
				if (this.inputDialogState != 0) {
					this.inputDialogState = 0;
					this.inputTaken = true;
				}
				this.openInterfaceID = -1;
				this.aBoolean1149 = false;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 34) {
				this.needDrawTabArea = true;
				int i9 = this.inStream.getUnsignedShort();
				RSInterface class9_2 = RSInterface.interfaceCache[i9];
				while (this.inStream.getPosition() < this.pktSize) {
					int j20 = this.inStream.method422();
					int i23 = this.inStream.getUnsignedShort();
					int l25 = this.inStream.getUnsignedByte();
					if (l25 == 255) {
						l25 = this.inStream.getInt();
					}
					if ((j20 >= 0) && (j20 < class9_2.inv.length)) {
						class9_2.inv[j20] = i23;
						class9_2.invStackSizes[j20] = l25;
					}
				}
				this.pktType = -1;
				return true;
			}
			// NOT DONE!
			// ANIMATION!
			if ((this.pktType == 105) || (this.pktType == 84) || (this.pktType == 147) || (this.pktType == 215) || (this.pktType == 4) || (this.pktType == 117) || (this.pktType == 156) || (this.pktType == 44) || (this.pktType == 160) || (this.pktType == 101) || (this.pktType == 151)) {
				this.method137(this.inStream, this.pktType);
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 106) {
				this.tabID = this.inStream.method427();
				this.needDrawTabArea = true;
				this.tabAreaAltered = true;
				this.pktType = -1;
				return true;
			}
			// DONE!
			if (this.pktType == 164) {
				int j9 = this.inStream.method434();
				this.method60(j9);
				if(this.invOverlayInterfaceID != -1) {
					this.invOverlayInterfaceID = -1;
					this.needDrawTabArea = true;
					this.tabAreaAltered = true;
				}
				this.backDialogID = j9;
				this.inputTaken = true;
				this.openInterfaceID = -1;
				this.aBoolean1149 = false;
				this.pktType = -1;
				return true;
			}
			SignLink.reporterror("T1 - " + this.pktType + "," + this.pktSize + " - " + this.anInt842 + "," + this.anInt843);
			this.resetLogout();
		} catch (IOException _ex) {
			this.dropClient();
		} catch (Exception exception) {
			String s2 = "T2 - " + this.pktType + "," + this.anInt842 + "," + this.anInt843 + " - " + this.pktSize + "," + (this.baseX + Client.myPlayer.smallX[0]) + "," + (this.baseY + Client.myPlayer.smallY[0]) + " - ";
			for(int j15 = 0; (j15 < this.pktSize) && (j15 < 50); j15++) {
				s2 = s2 + this.inStream.buffer[j15] + ",";
			}
			SignLink.reporterror(s2);
			this.resetLogout();
		}
	}