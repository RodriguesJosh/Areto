	private boolean doWalkTo(int i, int j, int k, int i1, int j1, int k1, int l1, int i2, int j2, boolean flag, int k2) {
		byte byte0 = 104;
		byte byte1 = 104;
		for (int l2 = 0; l2 < byte0; l2++) {
			for (int i3 = 0; i3 < byte1; i3++) {
				this.anIntArrayArray901[l2][i3] = 0;
				this.anIntArrayArray825[l2][i3] = 0x5f5e0ff;
			}
		}
		int j3 = j2;
		int k3 = j1;
		this.anIntArrayArray901[j2][j1] = 99;
		this.anIntArrayArray825[j2][j1] = 0;
		int l3 = 0;
		int i4 = 0;
		this.bigX[l3] = j2;
		this.bigY[l3++] = j1;
		boolean flag1 = false;
		int j4 = this.bigX.length;
		int ai[][] = this.aClass11Array1230[this.plane].clipData;
		while (i4 != l3) {
			j3 = this.bigX[i4];
			k3 = this.bigY[i4];
			i4 = (i4 + 1) % j4;
			if ((j3 == k2) && (k3 == i2)) {
				flag1 = true;
				break;
			}
			if (i1 != 0) {
				if (((i1 < 5) || (i1 == 10)) && this.aClass11Array1230[this.plane].method219(k2, j3, k3, j, i1 - 1, i2)) {
					flag1 = true;
					break;
				}
				if ((i1 < 10) && this.aClass11Array1230[this.plane].method220(k2, i2, k3, i1 - 1, j, j3)) {
					flag1 = true;
					break;
				}
			}
			if ((k1 != 0) && (k != 0) && this.aClass11Array1230[this.plane].method221(i2, k2, j3, k, l1, k1, k3)) {
				flag1 = true;
				break;
			}
			int l4 = this.anIntArrayArray825[j3][k3] + 1;
			if ((j3 > 0) && (this.anIntArrayArray901[j3 - 1][k3] == 0) && ((ai[j3 - 1][k3] & 0x1280108) == 0)) {
				this.bigX[l3] = j3 - 1;
				this.bigY[l3] = k3;
				l3 = (l3 + 1) % j4;
				this.anIntArrayArray901[j3 - 1][k3] = 2;
				this.anIntArrayArray825[j3 - 1][k3] = l4;
			}
			if ((j3 < (byte0 - 1)) && (this.anIntArrayArray901[j3 + 1][k3] == 0) && ((ai[j3 + 1][k3] & 0x1280180) == 0)) {
				this.bigX[l3] = j3 + 1;
				this.bigY[l3] = k3;
				l3 = (l3 + 1) % j4;
				this.anIntArrayArray901[j3 + 1][k3] = 8;
				this.anIntArrayArray825[j3 + 1][k3] = l4;
			}
			if ((k3 > 0) && (this.anIntArrayArray901[j3][k3 - 1] == 0) && ((ai[j3][k3 - 1] & 0x1280102) == 0)) {
				this.bigX[l3] = j3;
				this.bigY[l3] = k3 - 1;
				l3 = (l3 + 1) % j4;
				this.anIntArrayArray901[j3][k3 - 1] = 1;
				this.anIntArrayArray825[j3][k3 - 1] = l4;
			}
			if ((k3 < (byte1 - 1)) && (this.anIntArrayArray901[j3][k3 + 1] == 0) && ((ai[j3][k3 + 1] & 0x1280120) == 0)) {
				this.bigX[l3] = j3;
				this.bigY[l3] = k3 + 1;
				l3 = (l3 + 1) % j4;
				this.anIntArrayArray901[j3][k3 + 1] = 4;
				this.anIntArrayArray825[j3][k3 + 1] = l4;
			}
			if ((j3 > 0) && (k3 > 0) && (this.anIntArrayArray901[j3 - 1][k3 - 1] == 0) && ((ai[j3 - 1][k3 - 1] & 0x128010e) == 0) && ((ai[j3 - 1][k3] & 0x1280108) == 0) && ((ai[j3][k3 - 1] & 0x1280102) == 0)) {
				this.bigX[l3] = j3 - 1;
				this.bigY[l3] = k3 - 1;
				l3 = (l3 + 1) % j4;
				this.anIntArrayArray901[j3 - 1][k3 - 1] = 3;
				this.anIntArrayArray825[j3 - 1][k3 - 1] = l4;
			}
			if ((j3 < (byte0 - 1)) && (k3 > 0) && (this.anIntArrayArray901[j3 + 1][k3 - 1] == 0) && ((ai[j3 + 1][k3 - 1] & 0x1280183) == 0) && ((ai[j3 + 1][k3] & 0x1280180) == 0) && ((ai[j3][k3 - 1] & 0x1280102) == 0)) {
				this.bigX[l3] = j3 + 1;
				this.bigY[l3] = k3 - 1;
				l3 = (l3 + 1) % j4;
				this.anIntArrayArray901[j3 + 1][k3 - 1] = 9;
				this.anIntArrayArray825[j3 + 1][k3 - 1] = l4;
			}
			if ((j3 > 0) && (k3 < (byte1 - 1)) && (this.anIntArrayArray901[j3 - 1][k3 + 1] == 0) && ((ai[j3 - 1][k3 + 1] & 0x1280138) == 0) && ((ai[j3 - 1][k3] & 0x1280108) == 0) && ((ai[j3][k3 + 1] & 0x1280120) == 0)) {
				this.bigX[l3] = j3 - 1;
				this.bigY[l3] = k3 + 1;
				l3 = (l3 + 1) % j4;
				this.anIntArrayArray901[j3 - 1][k3 + 1] = 6;
				this.anIntArrayArray825[j3 - 1][k3 + 1] = l4;
			}
			if ((j3 < (byte0 - 1)) && (k3 < (byte1 - 1)) && (this.anIntArrayArray901[j3 + 1][k3 + 1] == 0) && ((ai[j3 + 1][k3 + 1] & 0x12801e0) == 0) && ((ai[j3 + 1][k3] & 0x1280180) == 0) && ((ai[j3][k3 + 1] & 0x1280120) == 0)) {
				this.bigX[l3] = j3 + 1;
				this.bigY[l3] = k3 + 1;
				l3 = (l3 + 1) % j4;
				this.anIntArrayArray901[j3 + 1][k3 + 1] = 12;
				this.anIntArrayArray825[j3 + 1][k3 + 1] = l4;
			}
		}
		this.anInt1264 = 0;
		if (!flag1) {
			if (flag) {
				int i5 = 100;
				for (int k5 = 1; k5 < 2; k5++) {
					for (int i6 = k2 - k5; i6 <= (k2 + k5); i6++) {
						for (int l6 = i2 - k5; l6 <= (i2 + k5); l6++) {
							if ((i6 >= 0) && (l6 >= 0) && (i6 < 104) && (l6 < 104) && (this.anIntArrayArray825[i6][l6] < i5)) {
								i5 = this.anIntArrayArray825[i6][l6];
								j3 = i6;
								k3 = l6;
								this.anInt1264 = 1;
								flag1 = true;
							}
						}
					}
					if (flag1) {
						break;
					}
				}
			}
			if (!flag1) {
				return false;
			}
		}
		i4 = 0;
		this.bigX[i4] = j3;
		this.bigY[i4++] = k3;
		int l5;
		for (int j5 = l5 = this.anIntArrayArray901[j3][k3]; (j3 != j2) || (k3 != j1); j5 = this.anIntArrayArray901[j3][k3]) {
			if (j5 != l5) {
				l5 = j5;
				this.bigX[i4] = j3;
				this.bigY[i4++] = k3;
			}
			if ((j5 & 2) != 0) {
				j3++;
			} else if ((j5 & 8) != 0) {
				j3--;
			}
			if ((j5 & 1) != 0) {
				k3++;
			} else if ((j5 & 4) != 0) {
				k3--;
			}
		}
		if (i4 > 0) {
			int k4 = i4;
			if (k4 > 25) {
				k4 = 25;
			}
			i4--;
			int k6 = this.bigX[i4];
			int i7 = this.bigY[i4];
			Client.anInt1288 += k4;
			if (Client.anInt1288 >= 92) {
				this.packet.putOpcode(36);
				this.packet.putInt(0);
				Client.anInt1288 = 0;
			}
			if (i == 0) {
				this.packet.putOpcode(164);
				this.packet.writeWordBigEndian(k4 + k4 + 3);
			}
			if (i == 1) {
				this.packet.putOpcode(248);
				this.packet.writeWordBigEndian(k4 + k4 + 3 + 14);
			}
			if (i == 2) {
				this.packet.putOpcode(98);
				this.packet.writeWordBigEndian(k4 + k4 + 3);
			}
			this.packet.method433(k6 + this.baseX);
			this.destX = this.bigX[0];
			this.destY = this.bigY[0];
			for (int j7 = 1; j7 < k4; j7++) {
				i4--;
				this.packet.writeWordBigEndian(this.bigX[i4] - k6);
				this.packet.writeWordBigEndian(this.bigY[i4] - i7);
			}
			this.packet.method431(i7 + this.baseY);
			this.packet.method424(super.keyStatus[5] != 1 ? 0 : 1);
			return true;
		}
		return i != 1;
	}