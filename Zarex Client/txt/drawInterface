	private void drawInterface(int j, int k, RSInterface class9, int l) {
		if ((class9.type != 0) || (class9.children == null)) {
			return;
		}
		if (class9.hiddenUntilMouseover && (this.anInt1026 != class9.id) && (this.anInt1048 != class9.id) && (this.anInt1039 != class9.id)) {
			return;
		}
		int i1 = DrawingArea.topX;
		int j1 = DrawingArea.topY;
		int k1 = DrawingArea.viewportWidth;
		int l1 = DrawingArea.viewportHeight;
		DrawingArea.setDrawingArea(l + class9.height, k, k + class9.width, l);
		int i2 = class9.children.length;
		for (int j2 = 0; j2 < i2; j2++) {
			int k2 = class9.childX[j2] + k;
			int l2 = (class9.childY[j2] + l) - j;
			RSInterface class9_1 = RSInterface.interfaceCache[class9.children[j2]];
			k2 += class9_1.xOffset;
			l2 += class9_1.yOffset;
			if (class9_1.contentType > 0) {
				this.drawFriendsListOrWelcomeScreen(class9_1);
			}
			if (class9_1.type == 0) {
				if (class9_1.scrollPosition > (class9_1.scrollMax - class9_1.height)) {
					class9_1.scrollPosition = class9_1.scrollMax - class9_1.height;
				}
				if (class9_1.scrollPosition < 0) {
					class9_1.scrollPosition = 0;
				}
				this.drawInterface(class9_1.scrollPosition, k2, class9_1, l2);
				if (class9_1.scrollMax > class9_1.height) {
					this.drawScrollBar(class9_1.height, class9_1.scrollPosition, l2, k2 + class9_1.width, class9_1.scrollMax);
				}
			} else if (class9_1.type != 1) {
				if (class9_1.type == 2) {
					int i3 = 0;
					for (int l3 = 0; l3 < class9_1.height; l3++) {
						for (int l4 = 0; l4 < class9_1.width; l4++) {
							int k5 = k2 + (l4 * (32 + class9_1.invSpritePadX));
							int j6 = l2 + (l3 * (32 + class9_1.invSpritePadY));
							if (i3 < 20) {
								k5 += class9_1.spritesX[i3];
								j6 += class9_1.spritesY[i3];
							}
							if (class9_1.inv[i3] > 0) {
								int k6 = 0;
								int j7 = 0;
								int j9 = class9_1.inv[i3] - 1;
								if (((k5 > (DrawingArea.topX - 32)) && (k5 < DrawingArea.viewportWidth) && (j6 > (DrawingArea.topY - 32)) && (j6 < DrawingArea.viewportHeight)) || ((this.activeInterfaceType != 0) && (this.anInt1085 == i3))) {
									int l9 = 0;
									if ((this.itemSelected == 1) && (this.anInt1283 == i3) && (this.anInt1284 == class9_1.id)) {
										l9 = 0xffffff;
									}
									RGBImage class30_sub2_sub1_sub1_2 = ItemDef.getSprite(j9, class9_1.invStackSizes[i3], l9);
									if (class30_sub2_sub1_sub1_2 != null) {
										if ((this.activeInterfaceType != 0) && (this.anInt1085 == i3) && (this.anInt1084 == class9_1.id)) {
											k6 = super.mouseX - this.anInt1087;
											j7 = super.mouseY - this.anInt1088;
											if ((k6 < 5) && (k6 > -5)) {
												k6 = 0;
											}
											if ((j7 < 5) && (j7 > -5)) {
												j7 = 0;
											}
											if (this.anInt989 < 5) {
												k6 = 0;
												j7 = 0;
											}
											class30_sub2_sub1_sub1_2.drawSprite1(k5 + k6, j6 + j7);
											if (((j6 + j7) < DrawingArea.topY) && (class9.scrollPosition > 0)) {
												int i10 = (this.anInt945 * (DrawingArea.topY - j6 - j7)) / 3;
												if (i10 > (this.anInt945 * 10)) {
													i10 = this.anInt945 * 10;
												}
												if (i10 > class9.scrollPosition) {
													i10 = class9.scrollPosition;
												}
												class9.scrollPosition -= i10;
												this.anInt1088 += i10;
											}
											if (((j6 + j7 + 32) > DrawingArea.viewportHeight) && (class9.scrollPosition < (class9.scrollMax - class9.height))) {
												int j10 = (this.anInt945 * ((j6 + j7 + 32) - DrawingArea.viewportHeight)) / 3;
												if (j10 > (this.anInt945 * 10)) {
													j10 = this.anInt945 * 10;
												}
												if (j10 > (class9.scrollMax - class9.height - class9.scrollPosition)) {
													j10 = class9.scrollMax - class9.height - class9.scrollPosition;
												}
												class9.scrollPosition += j10;
												this.anInt1088 -= j10;
											}
										} else if ((this.atInventoryInterfaceType != 0) && (this.atInventoryIndex == i3) && (this.atInventoryInterface == class9_1.id)) {
											class30_sub2_sub1_sub1_2.drawSprite1(k5, j6);
										} else {
											class30_sub2_sub1_sub1_2.drawSprite(k5, j6);
										}
										if ((class30_sub2_sub1_sub1_2.secondWidth == 33) || (class9_1.invStackSizes[i3] != 1)) {
											int k10 = class9_1.invStackSizes[i3];
											this.aTextDrawingArea_1270.method385(0, Client.intToKOrMil(k10), j6 + 10 + j7, k5 + 1 + k6);
											this.aTextDrawingArea_1270.method385(0xffff00, Client.intToKOrMil(k10), j6 + 9 + j7, k5 + k6);
										}
									}
								}
							} else if ((class9_1.rGBImages != null) && (i3 < 20)) {
								RGBImage class30_sub2_sub1_sub1_1 = class9_1.rGBImages[i3];
								if (class30_sub2_sub1_sub1_1 != null) {
									class30_sub2_sub1_sub1_1.drawSprite(k5, j6);
								}
							}
							i3++;
						}
					}
				} else if (class9_1.type == 3) {
					boolean flag = false;
					if ((this.anInt1039 == class9_1.id) || (this.anInt1048 == class9_1.id) || (this.anInt1026 == class9_1.id)) {
						flag = true;
					}
					int j3;
					if (this.interfaceIsSelected(class9_1)) {
						j3 = class9_1.colourConditionTrue;
						if (flag && (class9_1.colourConditionTrueMouseover != 0)) {
							j3 = class9_1.colourConditionTrueMouseover;
						}
					} else {
						j3 = class9_1.textColor;
						if (flag && (class9_1.colourConditionFalseMouseover != 0)) {
							j3 = class9_1.colourConditionFalseMouseover;
						}
					}
					if (class9_1.alpha == 0) {
						if (class9_1.filled) {
							DrawingArea.method336(class9_1.height, l2, k2, j3, class9_1.width);
						} else {
							DrawingArea.fillPixels(k2, class9_1.width, class9_1.height, j3, l2);
						}
					} else if (class9_1.filled) {
						DrawingArea.method335(j3, l2, class9_1.width, class9_1.height, 256 - (class9_1.alpha & 0xff), k2);
					} else {
						DrawingArea.method338(l2, class9_1.height, 256 - (class9_1.alpha & 0xff), j3, class9_1.width, k2);
					}
				} else if (class9_1.type == 4) {
					RSFont rSFont = class9_1.rSFonts;
					String s = class9_1.message;
					boolean flag1 = false;
					if ((this.anInt1039 == class9_1.id) || (this.anInt1048 == class9_1.id) || (this.anInt1026 == class9_1.id)) {
						flag1 = true;
					}
					int i4;
					if (this.interfaceIsSelected(class9_1)) {
						i4 = class9_1.colourConditionTrue;
						if (flag1 && (class9_1.colourConditionTrueMouseover != 0)) {
							i4 = class9_1.colourConditionTrueMouseover;
						}
						if (class9_1.textConditionTrue.length() > 0) {
							s = class9_1.textConditionTrue;
						}
					} else {
						i4 = class9_1.textColor;
						if (flag1 && (class9_1.colourConditionFalseMouseover != 0)) {
							i4 = class9_1.colourConditionFalseMouseover;
						}
					}
					if ((class9_1.atActionType == 6) && this.aBoolean1149) {
						s = "Please wait...";
						i4 = class9_1.textColor;
					}
					if (DrawingArea.width == 479) {
						if (i4 == 0xffff00) {
							i4 = 255;
						}
						if (i4 == 49152) {
							i4 = 0xffffff;
						}
					}
					for (int l6 = l2 + rSFont.charHeight; s.length() > 0; l6 += rSFont.charHeight) {
						if (s.indexOf("%") != -1) {
							do {
								int k7 = s.indexOf("%1");
								if (k7 == -1) {
									break;
								}
								s = s.substring(0, k7) + this.interfaceIntToString(this.extractInterfaceValues(class9_1, 0)) + s.substring(k7 + 2);
							} while (true);
							do {
								int l7 = s.indexOf("%2");
								if (l7 == -1) {
									break;
								}
								s = s.substring(0, l7) + this.interfaceIntToString(this.extractInterfaceValues(class9_1, 1)) + s.substring(l7 + 2);
							} while (true);
							do {
								int i8 = s.indexOf("%3");
								if (i8 == -1) {
									break;
								}
								s = s.substring(0, i8) + this.interfaceIntToString(this.extractInterfaceValues(class9_1, 2)) + s.substring(i8 + 2);
							} while (true);
							do {
								int j8 = s.indexOf("%4");
								if (j8 == -1) {
									break;
								}
								s = s.substring(0, j8) + this.interfaceIntToString(this.extractInterfaceValues(class9_1, 3)) + s.substring(j8 + 2);
							} while(true);
							do {
								int k8 = s.indexOf("%5");
								if (k8 == -1) {
									break;
								}
								s = s.substring(0, k8) + this.interfaceIntToString(this.extractInterfaceValues(class9_1, 4)) + s.substring(k8 + 2);
							} while (true);
						}
						int l8 = s.indexOf("\\n");
						String s1;
						if (l8 != -1) {
							s1 = s.substring(0, l8);
							s = s.substring(l8 + 2);
						} else {
							s1 = s;
							s = "";
						}
						if (class9_1.textCentered) {
							rSFont.method382(i4, k2 + (class9_1.width / 2), s1, l6, class9_1.textShadow);
						} else {
							rSFont.method389(class9_1.textShadow, k2, i4, s1, l6);
						}
					}
				} else if (class9_1.type == 5) {
					RGBImage rGBImage;
					if (this.interfaceIsSelected(class9_1)) {
						rGBImage = class9_1.sprite2;
					} else {
						rGBImage = class9_1.imageConditionFalse;
					}
					if (rGBImage != null) {
						rGBImage.drawSprite(k2, l2);
					}
				} else if (class9_1.type == 6) {
					int k3 = Rasterizer.textureInt1;
					int j4 = Rasterizer.textureInt2;
					Rasterizer.textureInt1 = k2 + (class9_1.width / 2);
					Rasterizer.textureInt2 = l2 + (class9_1.height / 2);
					int i5 = (Rasterizer.anIntArray1470[class9_1.rotation1] * class9_1.zoom) >> 16;
				int l5 = (Rasterizer.anIntArray1471[class9_1.rotation1] * class9_1.zoom) >> 16;
				boolean flag2 = this.interfaceIsSelected(class9_1);
				int i7;
				if (flag2) {
					i7 = class9_1.animationConditionTrue;
				} else {
					i7 = class9_1.animationConditionFalse;
				}
				Model model;
				if (i7 == -1) {
					model = class9_1.getAnimatedModel(-1, -1, flag2);
				} else {
					Sequence sequence = Sequence.anims[i7];
					model = class9_1.getAnimatedModel(sequence.frame1IDS[class9_1.animFrame], sequence.frame2IDS[class9_1.animFrame], flag2);
				}
				if (model != null) {
					model.method482(class9_1.rotation2, 0, class9_1.rotation1, 0, i5, l5);
				}
				Rasterizer.textureInt1 = k3;
				Rasterizer.textureInt2 = j4;
				} else if (class9_1.type == 7) {
					RSFont textDrawingArea_1 = class9_1.rSFonts;
					int k4 = 0;
					for (int j5 = 0; j5 < class9_1.height; j5++) {
						for (int i6 = 0; i6 < class9_1.width; i6++) {
							if (class9_1.inv[k4] > 0) {
								ItemDef itemDef = ItemDef.forID(class9_1.inv[k4] - 1);
								String s2 = itemDef.name;
								if (itemDef.stackable || (class9_1.invStackSizes[k4] != 1)) {
									s2 = s2 + " x" + Client.intToKOrMilLongName(class9_1.invStackSizes[k4]);
								}
								int i9 = k2 + (i6 * (115 + class9_1.invSpritePadX));
								int k9 = l2 + (j5 * (12 + class9_1.invSpritePadY));
								if (class9_1.textCentered) {
									textDrawingArea_1.method382(class9_1.textColor, i9 + (class9_1.width / 2), s2, k9, class9_1.textShadow);
								} else {
									textDrawingArea_1.method389(class9_1.textShadow, i9, class9_1.textColor, s2, k9);
								}
							}
							k4++;
						}
					}
				}
			}
		}
		DrawingArea.setDrawingArea(l1, i1, k1, j1);
	}